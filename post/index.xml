<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on pytimer</title>
    <link>https://pytimer.github.io/post/</link>
    <description>Recent content in Posts on pytimer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Jun 2018 14:17:19 +0800</lastBuildDate>
    
	<atom:link href="https://pytimer.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Seccomp</title>
      <link>https://pytimer.github.io/2018/06/seccomp/</link>
      <pubDate>Fri, 01 Jun 2018 14:17:19 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/seccomp/</guid>
      <description> 什么是Seccomp？ 全称：secure computing mode， 是linux kernel2.6.23版本以后支持的一种安全机制。
在Linux中，系统调用会直接暴露给用户态程序，因此不安全的代码滥用调用就会对系统安全造成威胁。通过seccomp可以限制程序对于系统调用的使用，减少系统的暴露面。
查看内核是否支持和使用seccomp  利用/proc/&amp;lt;pid&amp;gt;/status中的Seccomp查看，如果有该字段，说明支持Seccomp。  cat /proc/1/status | grep Seccomp
 利用prctl(2)的PR_GET_SECCOMP的参数获取当前进程的seccomp状态。返回值0表示没有使用seccomp;返回值2表示使用了seccomp并处于SECCOMP_MODE_FILTER模式；其他情况进程会被SIGKILL信号杀死  </description>
    </item>
    
    <item>
      <title>Golang Contribution</title>
      <link>https://pytimer.github.io/2018/05/golang-contribution/</link>
      <pubDate>Thu, 24 May 2018 10:48:15 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/05/golang-contribution/</guid>
      <description>golang/go标准库贡献方式 阅读contribute内容 https://golang.org/doc/contribute.html
准备工作 安装配置go-contrib-init工具 $ go get -v -u golang.org/x/tools/cmd/go-contrib-init $ cd /code/to/edit $ go-contrib-init  安装git 配置git使用Gerrit  申请Google Account。
 登录googlesource并生成密码
  进入go.googlesourc.com，单击右上角的&amp;rdquo;Generate Password&amp;rdquo;
 执行完第2步后，会看到&amp;rdquo;Configure Git&amp;rdquo;页面，该页面说明如何配置git使用你的认证token，按说明执行后，在~/.gitcookies文件中可以看到你的token
 注册Gerrit
  用你的Google Account登录go-review.googlesource.com/login/
Contributor License  登录Gerrit
 点击右上角头像的settings，再点击&amp;rdquo;Agreements&amp;rdquo;，如果没有任何的agreements，点击&amp;rdquo;New Contributor Agreement&amp;rdquo;，按提示进行操作。
  设置开发环境 安装git-codereview工具 $ go get -u golang.org/x/review/git-codereview  安装完后git-codereview会在$GOPATH/bin下，把$GOPATH/bin添加到PATH。 (Windows的话执行git --exec-path查看git的执行路径，把git-codereview拷贝到该目录下)
执行以下命令查看是否安装完成
$ git codereview help  设置git aliases 把以下内容写入到~/.gitconfig文件
[alias] change = codereview change gofmt = codereview gofmt mail = codereview mail pending = codereview pending submit = codereview submit sync = codereview sync  代码贡献 讨论设计 在提交代码之前，先去github仓库上提交issue，说明自己的意图，经过讨论后再进行代码的提交</description>
    </item>
    
    <item>
      <title>Readme</title>
      <link>https://pytimer.github.io/2018/05/readme/</link>
      <pubDate>Fri, 18 May 2018 16:29:28 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/05/readme/</guid>
      <description>Readme Hello, welcome to Pytimer world!
Language Golang python</description>
    </item>
    
  </channel>
</rss>