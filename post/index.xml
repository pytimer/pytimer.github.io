<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on pytimer</title>
    <link>https://pytimer.github.io/post/</link>
    <description>Recent content in Posts on pytimer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Jun 2018 10:42:03 +0800</lastBuildDate>
    
	<atom:link href="https://pytimer.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go调试工具Delve</title>
      <link>https://pytimer.github.io/2018/06/go%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7delve/</link>
      <pubDate>Wed, 06 Jun 2018 10:42:03 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/go%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7delve/</guid>
      <description>安装 delve/Documentation/installation · derekparker/delve · GitHub提供了所有操作系统平台上安装Delve的说明，
用法 可以使用Delve调试Go程序
Delve支持远程调试、命令行调试、集成环境调试  远程调试  如果程序运行在服务器，我们又没有办法查看到程序的源码，我们可以通过远程调试的方式进行
 在服务器上查看到程序的pid  ps -ef|grep &amp;lt;program&amp;gt;
 执行attach命令  dlv attach &amp;lt;PID&amp;gt; --headless --api-version=2 --log --listen=:8081
 在本机执行connect命令  dlv connect &amp;lt;server_ip&amp;gt;:8081
如果本机dlv退出，远程的dlv也会退出
本机dlv没有启动，远程dlv直接关闭，会导致进程退出
本机dlv退出的时候，会询问是否关闭调试进程的pid
 命令行调试  dlv debug
具体可以查看Getting started with Delve该文档，有比较详细的说明
 集成环境调试  [Chinese]delve · nebulasio/wiki Wiki · GitHub
常用命令说明    命令 描述     args 打印函数参数   break (alias: b) 设置一个断点   breakpoints (alias: bp) 打印活动断点信息   clear 删除断点   clearall 删除所有的断点   condition (alias: cond) 设置断点条件   config 改变配置参数   continue (alias: c) 运行到断点或程序终止   exit (alias: quit q)   funcs 打印函数列表   goroutine 显示或更改当前goroutine   goroutines 列出程序的全部goroutines   help (alias: h) 打印出帮助信息   list (alias: ls l)   locals 打印局部变量   next (alias: n) 跳到下一行   on 在遇到断点时执行一个命令   print (alias: p) 表达式   regs 打印CPU寄存器的内容   restart (alias: r) 重启进程   set 更改变量的值   source 执行包含delve命令列表的文件   sources 打印源文件列表   stack (alias: bt) 打印堆栈跟踪信息   step (alias: s) 单步执行程序   step-instruction (alias: si) 单步单个执行cpu指令   stepout 退出当前函数   thread (alias: tr) 切换到指定的线程   threads 打印每一个跟踪线程的信息   trace (alias: t) 设置跟踪点   types 打印类型列表   vars 打印某个包内的(全局)变量   whatis 打印表达式的类型    完整的命令说明：delve/Documentation/cli · derekparker/delve · GitHub</description>
    </item>
    
    <item>
      <title>flag命令行解析</title>
      <link>https://pytimer.github.io/2018/06/flag%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 06 Jun 2018 09:47:21 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/flag%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%A7%A3%E6%9E%90/</guid>
      <description>flag用于解析命令行参数
语法 -flag //只支持bool -flag=x //都支持 -flag x //支持非bool
bool类型可以为：1,0,t,f,T,F,true,false,True,False,TRUE,FALSE
flag定义参数  flag.String()等flag.Xxx()方法，flag该方式返回一个指针 flag.XxxVar()方法将flag参数绑定到一个变量 flag.Var()方法绑定自定义类型，自定义类型需要实现Value()接口  flag.Parse() 解析命令行参数到定义的flag
获取非flag参数 flag.Args() flag.Arg(i)
绑定自定义的flag参数 绑定自定义的flag参数需要实现标准库里的Value接口。
// Value is the interface to the dynamic value stored in a flag. // (The default value is represented as a string.) // // If a Value has an IsBoolFlag() bool method returning true, // the command-line parser makes -name equivalent to -name=true // rather than using the next command-line argument.</description>
    </item>
    
    <item>
      <title>godoc介绍</title>
      <link>https://pytimer.github.io/2018/06/godoc%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 06 Jun 2018 09:47:06 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/godoc%E4%BB%8B%E7%BB%8D/</guid>
      <description>godoc为go语言提供文档生成的工具
godoc有两种使用的方法 命令行使用 godoc fmt Println // 输出fmt.Println的用法文档 godoc -src fmt Println //fmt.Println的实现  启动server godoc -http=&amp;quot;:6060&amp;quot;  搜索 godoc -q Reader  编写godoc文档 规则：
 类型、变量、函数、常量编写注释的时候，直接在声明前编写注释，中间不留空行。  // Fprint formats using the default formats for its operands and writes to w. // Spaces are added between operands when neither is a string. // It returns the number of bytes written and any write error encountered. func Fprint(w io.Writer, a .</description>
    </item>
    
    <item>
      <title>Go调用Windows DLL</title>
      <link>https://pytimer.github.io/2018/06/go%E8%B0%83%E7%94%A8windows-dll/</link>
      <pubDate>Wed, 06 Jun 2018 09:45:10 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/go%E8%B0%83%E7%94%A8windows-dll/</guid>
      <description>动态加载DLL 在编译之前不知道将要调用什么函数，在运行过程中根据需要决定调用哪些函数。
调用方法 LoadLibrary 加载动态链接库到内存，用GetProcAddress动态获得DLL函数入口地址
使用完后，调用FreeLibrary从内存中把它卸载
参考地址：
动态载入DLL所需要的三个函数详解（LoadLibrary,GetProcAddress,FreeLibrary） - westsoft - 博客园</description>
    </item>
    
    <item>
      <title>SUID SGID详细说明</title>
      <link>https://pytimer.github.io/2018/06/suid-sgid%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Tue, 05 Jun 2018 19:44:06 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/suid-sgid%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/</guid>
      <description>Unix下关于文件权限的说明 9 8 7 6 5 4 3 2 1 0 - r w x r - x r - x  第9位表示文件类型，类型说明：
   文件类型 说明     p 管道文件   d 目录文件   l 符号连接文件   - 普通文件   s socket文件   c 字符设备文件   b 块设备文件    第8-6位 文件所有者权限 第5-3位 同组用户权限 第2-0位 其他用户权限
r表示可读 w表示可写 x表示可执行</description>
    </item>
    
    <item>
      <title>Cloud Native</title>
      <link>https://pytimer.github.io/2018/06/cloud-native/</link>
      <pubDate>Fri, 01 Jun 2018 14:38:01 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/cloud-native/</guid>
      <description>参考
Kubernetes与云原生2017年年终总结与2018年展望</description>
    </item>
    
    <item>
      <title>Seccomp</title>
      <link>https://pytimer.github.io/2018/06/seccomp/</link>
      <pubDate>Fri, 01 Jun 2018 14:17:19 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/seccomp/</guid>
      <description> 什么是Seccomp？ 全称：secure computing mode， 是linux kernel2.6.23版本以后支持的一种安全机制。
在Linux中，系统调用会直接暴露给用户态程序，因此不安全的代码滥用调用就会对系统安全造成威胁。通过seccomp可以限制程序对于系统调用的使用，减少系统的暴露面。
查看内核是否支持和使用seccomp  利用/proc/&amp;lt;pid&amp;gt;/status中的Seccomp查看，如果有该字段，说明支持Seccomp。  cat /proc/1/status | grep Seccomp
 利用prctl(2)的PR_GET_SECCOMP的参数获取当前进程的seccomp状态。返回值0表示没有使用seccomp;返回值2表示使用了seccomp并处于SECCOMP_MODE_FILTER模式；其他情况进程会被SIGKILL信号杀死  </description>
    </item>
    
    <item>
      <title>golang/go标准库贡献方式</title>
      <link>https://pytimer.github.io/2018/05/golang/go%E6%A0%87%E5%87%86%E5%BA%93%E8%B4%A1%E7%8C%AE%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Thu, 24 May 2018 10:48:15 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/05/golang/go%E6%A0%87%E5%87%86%E5%BA%93%E8%B4%A1%E7%8C%AE%E6%96%B9%E5%BC%8F/</guid>
      <description>阅读contribute内容 https://golang.org/doc/contribute.html
准备工作 安装配置go-contrib-init工具 $ go get -v -u golang.org/x/tools/cmd/go-contrib-init $ cd /code/to/edit $ go-contrib-init  安装git 配置git使用Gerrit  申请Google Account。
 登录googlesource并生成密码
  进入go.googlesourc.com，单击右上角的&amp;rdquo;Generate Password&amp;rdquo;
 执行完第2步后，会看到&amp;rdquo;Configure Git&amp;rdquo;页面，该页面说明如何配置git使用你的认证token，按说明执行后，在~/.gitcookies文件中可以看到你的token
 注册Gerrit
  用你的Google Account登录go-review.googlesource.com/login/
Contributor License  登录Gerrit
 点击右上角头像的settings，再点击&amp;rdquo;Agreements&amp;rdquo;，如果没有任何的agreements，点击&amp;rdquo;New Contributor Agreement&amp;rdquo;，按提示进行操作。
  设置开发环境 安装git-codereview工具 $ go get -u golang.org/x/review/git-codereview  安装完后git-codereview会在$GOPATH/bin下，把$GOPATH/bin添加到PATH。 (Windows的话执行git --exec-path查看git的执行路径，把git-codereview拷贝到该目录下)
执行以下命令查看是否安装完成
$ git codereview help  设置git aliases 把以下内容写入到~/.gitconfig文件
[alias] change = codereview change gofmt = codereview gofmt mail = codereview mail pending = codereview pending submit = codereview submit sync = codereview sync  代码贡献 讨论设计 在提交代码之前，先去github仓库上提交issue，说明自己的意图，经过讨论后再进行代码的提交</description>
    </item>
    
    <item>
      <title>Readme</title>
      <link>https://pytimer.github.io/2018/05/readme/</link>
      <pubDate>Fri, 18 May 2018 16:29:28 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/05/readme/</guid>
      <description>Readme Hello, welcome to Pytimer world!
Language Golang python</description>
    </item>
    
  </channel>
</rss>