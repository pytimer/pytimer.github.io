<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Pytimer Blog</title>
    <link>https://pytimer.github.io/post/</link>
    <description>Recent content in Posts on Pytimer Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Jul 2020 09:47:00 +0800</lastBuildDate>
    
	<atom:link href="https://pytimer.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在Windows上使用Kubectl连接集群</title>
      <link>https://pytimer.github.io/2020/07/%E5%9C%A8windows%E4%B8%8A%E4%BD%BF%E7%94%A8kubectl%E8%BF%9E%E6%8E%A5%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Mon, 20 Jul 2020 09:47:00 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2020/07/%E5%9C%A8windows%E4%B8%8A%E4%BD%BF%E7%94%A8kubectl%E8%BF%9E%E6%8E%A5%E9%9B%86%E7%BE%A4/</guid>
      <description>平时都在Linux上搭建并操作Kubernetes集群，但是有时候会使用Windows来进行开发或者日常工作，这个时候如果在登录某台Linux主机，通过kubectl命令行操作集群就显得不是很方便，Kubernetes本身也是提供了Windows的命令行，因此在Windows上安装并配置kubectl，用于操作远端的Kubernetes集群。下面就是相关步骤。
下载Windows版本kubectl 可以按照官方文档Install kubectl on Windows来下载Windows版本的kubectl命令行。
因集群为v1.17.2版本，因此这里直接下载指定版本的kubectl.exe。
curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.2/bin/windows/amd64/kubectl.exe
下载好后，配置Windows的PATH，在该环境变量值后增加F:\k8s\bin(该路径为kubectl.exe的目录)。
配置好后，打开Git Bash或其他的工具，输入kubectl.exe version --client，可以看到对应的kubectl版本。到这里kubectl就安装好了。下面需要配置kubectl来连接远端Kubernetes集群。
$ kubectl.exe version --client Client Version: version.Info{Major:&amp;quot;1&amp;quot;, Minor:&amp;quot;17&amp;quot;, GitVersion:&amp;quot;v1.17.2&amp;quot;, GitCommit:&amp;quot;59603c6e503c87169aea6106f57b9f242f64df89&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;, BuildDate:&amp;quot;2020-01-18T23:30:10Z&amp;quot;, GoVersion:&amp;quot;go1.13.5&amp;quot;, Compiler:&amp;quot;gc&amp;quot;, Platform:&amp;quot;windows/amd64&amp;quot;}  配置kubectl kubectl需要使用kubeconfig来连接远端集群，通常有三种方式来指定kubeconfig。
 ~/.kube/config，默认kubectl会使用该目录。 KUBECONFIG，使用该环境变量的文件。 --kubeconfig，每次执行命令指定kubeconfig文件。  这里采用第2种方式。因此在Windows上配置一个环境变量KUBECONFIG。设置KUBECONFIG=F:\k8s\bin\kubeconfig。
重新打开Git Bash，执行kubectl.exe get nodes，可以看到连接到了远端的Kubernetes集群。
$ kubectl.exe get nodes NAME STATUS ROLES AGE VERSION meta-k8s-234 Ready master 29m v1.17.2 meta-k8s-235 Ready &amp;lt;none&amp;gt; 28m v1.17.2 meta-k8s-236 Ready &amp;lt;none&amp;gt; 28m v1.17.2 meta-k8s-237 Ready &amp;lt;none&amp;gt; 28m v1.</description>
    </item>
    
    <item>
      <title>Kubernetes Dashboard Installation</title>
      <link>https://pytimer.github.io/2019/12/kubernetes-dashboard-installation/</link>
      <pubDate>Tue, 17 Dec 2019 17:14:45 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2019/12/kubernetes-dashboard-installation/</guid>
      <description>Dashboard为Kubernetes官方的一个webui，集合了所有命令行可以操作的资源，可以根据浏览器的语言自动进行语言的识别。通过webui，我们可以更直观的看到Kubernetes集群的运行情况。不过在安装Dashboard的过程中有一些坑，因此在这里整理成文档以便在今后方便查阅。
安装 Dashboard的安装相对还是简单的，参考官方的github就可以。
 kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
 不过在这中间有一个坑，那就是Dashboard的webui默认是自动生成证书的，由于时间和名称的问题，会导致Chrome和IE等浏览器无法打开界面，这里需要我们自己制作证书处理。
开启NodePort kind: Service apiVersion: v1 metadata: labels: k8s-app: kubernetes-dashboard name: kubernetes-dashboard namespace: kube-system spec: ports: - port: 443 targetPort: 8443 nodePort: 30003 selector: k8s-app: kubernetes-dashboard type: NodePort  使用kubectl apply的命令将该service应用在Kubernetes集群中，可以看到该service已经生效。
[root@k8s ~]# kubectl get svc -n kube-system kubernetes-dashboard NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE kubernetes-dashboard NodePort 10.106.67.12 &amp;lt;none&amp;gt; 443:30003/TCP 40m  通过浏览器访问Dashboard，我们发现无法访问界面，会有类似x.x.x.x通常会使用加密技术来保护您的信息，Google Chrome此次尝试连接到x.x.x.x时，此网站发回了异常的错误凭据。...的字样，更换IE、360浏览器均无法访问，在机器上使用curl -k https://x.x.x.x:30003/命令测试，是可以通的。
出现以上现象是因为Dashboard默认为webui生成的证书时间是无效的，时间是过期的，因此需要解决下该问题，以通过浏览器来访问。
解决证书过期问题 [root@k8s ~]# openssl genrsa -out dashboard.</description>
    </item>
    
    <item>
      <title>Docker容器无法连接外部网络原因排查</title>
      <link>https://pytimer.github.io/2019/11/docker%E5%AE%B9%E5%99%A8%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E5%A4%96%E9%83%A8%E7%BD%91%E7%BB%9C%E5%8E%9F%E5%9B%A0%E6%8E%92%E6%9F%A5/</link>
      <pubDate>Wed, 20 Nov 2019 11:08:41 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2019/11/docker%E5%AE%B9%E5%99%A8%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E5%A4%96%E9%83%A8%E7%BD%91%E7%BB%9C%E5%8E%9F%E5%9B%A0%E6%8E%92%E6%9F%A5/</guid>
      <description>Docker是当前最常用的容器运行时引擎，在使用Kubernetes的过程中，我们使用Docker来负责底层的容器的启动、停止。在用户新安装Docker后的使用过程中，发现通过docker run命令启动的容器，使用默认的bridge网络的情况下，容器无法连接到外部网络，针对这个现象进行排查。
缩小问题范围 使用 docker run -it --rm alpine:3.6 /bin/sh 启动一个容器，采用bridge网络，在容器内ping外部网络的IP，我们发现是无法ping通，该命令会hang住。退出该容器，再尝试使用host网络启动容器，docker run -it --rm --network=host alpine:3.6 /bin/sh，这次我们发现是可以ping通外部网络的，说明是docker的默认bridge网络有问题，缩小范围。
容器使用bridge网络的情况下，在ping外部网络的情况下，如果发送的不是Docker启动创建的docker0的网桥，会进行SNAT，然后使用宿主机的网卡出去，那么怀疑是SNAT可能有问题，因此查看iptables中和Docker相关的规则。命令结果如下：
# iptables -t nat -nvL POSTROUTING Chain POSTROUTING (policy ACCEPT 845 packets, 57086 bytes) pkts bytes target prot opt in out source destination 1414 96107 POSTROUTING_direct all -- * * 0.0.0.0/0 0.0.0.0/0 1414 96107 POSTROUTING_ZONES_SOURCE all -- * * 0.0.0.0/0 0.0.0.0/0 1414 96107 POSTROUTING_ZONES all -- * * 0.0.0.0/0 0.0.0.0/0  根据上面结果，我们发现缺少了一条-A POSTROUTING -s 172.</description>
    </item>
    
    <item>
      <title>Go开发规范</title>
      <link>https://pytimer.github.io/2019/10/go%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</link>
      <pubDate>Fri, 25 Oct 2019 10:00:03 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2019/10/go%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</guid>
      <description>代码规范 辅助工具 goimports goimports是Go官方提供的工具，能够为我们自动格式化Go语言代码并对引入的包进行管理，其中包括自动增删依赖包引用，将依赖包进行分类排序。
goimports等价于gofmt加依赖包的管理。
因此建议所有GO语言开发人员在开发时，使用goimports进行格式化，并在IDE中进行配置，保存时自动格式化。
在Goland中进行设置 golint golint是Go官方提供的静态检查工具，该工具的诟病在于可定制化不足，但是在Go的社区中，保证一致性的编程规范是有益的事情，因此该工具大多数用在基础库和框架项目中，上层业务应用可以选用golangci-lint这个工具进行静态检查。
建议所有Go语言开发人员在项目中加入golint或golangci-lint工具进行静态检查，甚至于对于基础库和框架来说，可以同时使用上述两个工具来进行检查。
自动化 无论是上述的格式化还是静态检查，我们都要在我们的CI流程中进行自动化的处理，从而减少代码审核人员的工作，将重心放在代码逻辑上。
Drone结合上述工具进行自动化的示例。
项目开发 目录结构 在项目开发中，Go官方并没有给出一个推荐的目录规划，而在社区中有一些常见的约定，具体的可以看golang-standards/project-layout ，我们也是建议采用该方式进行项目目录规划。
├── LICENSE ├── Makefile ├── README.md ├── api ├── assets ├── build ├── cmd ├── configs ├── deployments ├── docs ├── examples ├── githooks ├── init ├── internal ├── pkg ├── scripts ├── test ├── third_party ├── tools ├── vendor ├── web └── website  下面介绍常见并且重要的目录及文件。
README.md 该文件写明该项目的简介，功能说明等。
CONTRIBUTING.md 该文件说明其他开发人员如何合作开发该项目。
/pkg 该目录存放的是项目中可以被外部项目或者本项目使用的代码仓库，外部项目直接通过import即可引入该包代码。</description>
    </item>
    
    <item>
      <title>[FAQ] 修改configmap后，使用subPath的Pod异常</title>
      <link>https://pytimer.github.io/2019/09/faq-%E4%BF%AE%E6%94%B9configmap%E5%90%8E%E4%BD%BF%E7%94%A8subpath%E7%9A%84pod%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Wed, 11 Sep 2019 17:02:11 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2019/09/faq-%E4%BF%AE%E6%94%B9configmap%E5%90%8E%E4%BD%BF%E7%94%A8subpath%E7%9A%84pod%E5%BC%82%E5%B8%B8/</guid>
      <description>Pod状态异常，挂载configmap显示no such file or directory $ kubectl get pod -o wide test-7695dc7fb9-rjxlq 0/1 CrashLoopBackOff 13 17h 192.168.100.20 node1 &amp;lt;none&amp;gt;  CrashLoopBackOff状态需要查看pod的日志，通过kubectl logs可以查看到具体的错误信息。
$ kubectl logs -n test-7695dc7fb9-rjxlq container_linux.go:345: starting container process caused &amp;quot;process_linux.go:430: container init caused \&amp;quot;rootfs_linux.go:58: mounting \\\&amp;quot;/var/lib/kubelet/pods/ed1b799a-d3a5-11e9-add6-0894ef725f6e/volume-subpaths/test-cm/app-conf/1\\\&amp;quot; to rootfs \\\&amp;quot;/var/lib/docker/overlay/23a69e27f79f84a14b50fbee1e4840836487f8c740423291c2f785da1e7a6820/merged\\\&amp;quot; at \\\&amp;quot;/var/lib/docker/overlay/23a69e27f79f84a14b50fbee1e4840836487f8c740423291c2f785da1e7a6820/merged/etc/app/app.conf\\\&amp;quot; caused \\\&amp;quot;no such file or directory\\\&amp;quot;\&amp;quot;&amp;quot;  查看日志发现是挂载的configmap有问题。
猜测原因：该pod采用subPath的方式挂载configmap，怀疑是configmap修改后，未重建pod导致，因此会出现上述no such file or directory的错误。
排查问题 查看异常pod的uid，通过下述的命令我们可以看到当前pod在2019-09-10T08:35:21Z的时间创建，并且uid为ed1b799a-d3a5-11e9-add6-0894ef725f6e。
$ kubectl get pod test-7695dc7fb9-rjxlq -o json | jq .metadata { &amp;quot;creationTimestamp&amp;quot;: &amp;quot;2019-09-10T08:35:21Z&amp;quot;, &amp;quot;generateName&amp;quot;: &amp;quot;test-7695dc7fb9-&amp;quot;, &amp;quot;labels&amp;quot;: { &amp;quot;application&amp;quot;: &amp;quot;test&amp;quot;, &amp;quot;pod-template-hash&amp;quot;: &amp;quot;3251873965&amp;quot; }, &amp;quot;name&amp;quot;: &amp;quot;test-7695dc7fb9-rjxlq&amp;quot;, &amp;quot;namespace&amp;quot;: &amp;quot;openstack&amp;quot;, &amp;quot;ownerReferences&amp;quot;: [ { &amp;quot;apiVersion&amp;quot;: &amp;quot;apps/v1&amp;quot;, &amp;quot;blockOwnerDeletion&amp;quot;: true, &amp;quot;controller&amp;quot;: true, &amp;quot;kind&amp;quot;: &amp;quot;ReplicaSet&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;test-7695dc7fb9&amp;quot;, &amp;quot;uid&amp;quot;: &amp;quot;ece58508-d3a5-11e9-add6-0894ef725f6e&amp;quot; } ], &amp;quot;resourceVersion&amp;quot;: &amp;quot;1762165&amp;quot;, &amp;quot;selfLink&amp;quot;: &amp;quot;/api/v1/namespaces/default/pods/test-7695dc7fb9-rjxlq&amp;quot;, &amp;quot;uid&amp;quot;: &amp;quot;ed1b799a-d3a5-11e9-add6-0894ef725f6e&amp;quot; }  接下来就需要登录到pod所在的节点进行查看。</description>
    </item>
    
    <item>
      <title>Mac安装使用Docker</title>
      <link>https://pytimer.github.io/2019/06/mac%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8docker/</link>
      <pubDate>Wed, 26 Jun 2019 19:35:13 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2019/06/mac%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8docker/</guid>
      <description>Docker是目前最常用的容器引擎，在Mac上安装Docker。
安装、配置Docker Install Docker Desktop for Mac
按照官方文档直接下载Docker.img并双击安装即可，安装的过程中，需要输入当前用户的登录密码。
配置Docker 在Mac上，我们需要先注册Docker ID，进行登录才可以使用。因此我们需要先去https://cloud.docker.com注册自己的账号。
Dockerhub关联Github上的项目 关联Github账号 进入https://cloud.docker.com，登录自己的账号，然后点击账号的倒三角，看到Account Settings，点击进入设置页面，查看Linked Accounts选项卡，可以关联Github账号，关联好后会显示关联成功。
创建Repository 创建好Repository后，点击Builds，设置自动制作镜像的操作。</description>
    </item>
    
    <item>
      <title>Coredns简介</title>
      <link>https://pytimer.github.io/2019/06/coredns%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 06 Jun 2019 18:06:42 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2019/06/coredns%E7%AE%80%E4%BB%8B/</guid>
      <description>DNS Linux上通过/etc/resolv.conf文件可以配置DNS相关信息，该文件是resovler类库所使用的配置文件，每当通过域名访问其他主机时，该类库会将域名转换为对应的IP，然后才可以进行访问。
resolv.conf 配置 nameserver 该选项用来配置DNS服务器地址，可以指定多个DNS
domain 该选项用来指定本地的域名，没有配置search的情况下，search默认使用的为domain的值
search 用来指定多个域名，用空格分隔。当访问的域名无法被DNS服务器解析时，resolver会将该域名后加上search指定的值，重新请求DNS，直到被正确解析或者列表循环结束。
nslookup 默认的超时时间为15s左右。
没有配置nameserver 在没有配置任何DNS的情况下，解析域名失败，返回如下错误：
$ nslookup baidu.com ;; connection timed out; no servers could be reached  配置nameserver $ cat /etc/resolv.conf nameserver 8.8.8.8  $ nslookup baidu.com Server: 8.8.8.8 Address: 8.8.8.8#53 Non-authoritative answer: Name: baidu.com Address: x.x.x.x Name: baidu.com Address: y.y.y.y  如果没有解析域名成功会有如下信息：
$ nslookup aaa.bbb.ccc Server: 8.8.8.8 Address: 8.8.8.8#53 ** server can&#39;t find aaa.bbb.ccc: NXDOMAIN  DNS常见记录类型  A：指定域名对应的IP地址</description>
    </item>
    
    <item>
      <title>Change Etcd cluster member ip</title>
      <link>https://pytimer.github.io/2019/05/change-etcd-cluster-member-ip/</link>
      <pubDate>Tue, 28 May 2019 13:35:48 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2019/05/change-etcd-cluster-member-ip/</guid>
      <description>背景 Etcd是用于共享配置和服务发现的分布式、满足一致性的KV系统，受到Zookeeper启发，该项目是由CoreOS公司发起。目前在各种云环境中应用广泛，几个比较流行的云项目都采用了Etcd，如CloudFoundry、Kubernetes、Docker。Etcd采用Raft协议进行主节点的选举，并把相应的成员信息存储在各成员的db中。更多关于Etcd的详细介绍，可以在网上或者官方看到，这里不进行相关描述。
由于Kubernetes采用Etcd作为后端数据存储，如果Etcd出现问题，会导致整个Kubernetes集群的数据不一致，严重的甚至会导致集群不可用，因此需要掌握Etcd集群的常见问题解决方式，以便在该组件出现故障的时候，可以及时修复，从而保证Kubernetes集群的正常可用，不影响用户的使用。
如果Kubernetes集群部署完成后，更新整个集群所有节点的IP地址，当前Kubernetes的控制节点和Etcd成员节点在同一主机上运行，这也意味着如果修改Kubernetes控制节点的IP地址，需要对Etcd集群进行操作，以便Etcd集群可以使用新的IP地址进行通信。因此本文档重点介绍Etcd集群成员变更的两种方式。
成员变更解决方式 Etcd集群本身满足(n/2)+1的成员容忍性。下面为集群大小对应的可容忍的异常成员数量。
   集群大小 Majority 容忍数量     1 1 0   2 2 0   3 2 1   4 3 1   5 3 2   6 4 2   7 4 3   8 5 3   9 5 4    目前我们的Kubernetes集群采用大多数是3节点的Etcd集群，因此允许一个节点失联。
下面详细描述下如何进行集群成员IP变更，因为我们的Etcd集群运行在容器中，采用Static Pod的方式由Kubelet进行管理，所以如果Etcd集群部署形态并非容器的话，请根据实际情况进行相应调整，关于etcdctl的操作是一致的，没有区别。
我们仍然使用下面的三节点集群，所有节点IP地址如下：
   成员名称 旧IP 新IP     master1 192.</description>
    </item>
    
    <item>
      <title>预留计算资源</title>
      <link>https://pytimer.github.io/2019/05/%E9%A2%84%E7%95%99%E8%AE%A1%E7%AE%97%E8%B5%84%E6%BA%90/</link>
      <pubDate>Mon, 13 May 2019 15:46:02 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2019/05/%E9%A2%84%E7%95%99%E8%AE%A1%E7%AE%97%E8%B5%84%E6%BA%90/</guid>
      <description>Kubernetes Node Allocatable 表示整个集群当前节点pod可用的计算资源量，该配置可以保证调度器不会超额申请计算资源，目前支持CPU,memory,storage这几个参数。
Node Capacity --------------------------- | kube-reserved | |-------------------------| | system-reserved | |-------------------------| | eviction-threshold | |-------------------------| | | | allocatable | | (available for pods) | | | | | ---------------------------  https://k8smeetup.github.io/docs/tasks/administer-cluster/out-of-resource/#eviction-policy https://yq.aliyun.com/articles/604524 https://github.com/rootsongjc/qa/issues/3 https://kubernetes.io/docs/tasks/administer-cluster/reserve-compute-resources/#general-guidelines https://kubernetes.io/docs/tasks/administer-cluster/reserve-compute-resources/ https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/node-allocatable.md#recommended-cgroups-setup https://github.com/rancher/rancher/issues/17177 https://github.com/kubernetes/kubernetes/blob/v1.11.6/pkg/kubelet/cm/cgroup_manager_linux.go#L259 http://www.kbase101.com/question/18764.html https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/resource_management_guide/chap-using_control_groups#sec-Creating_Cgroups https://k8smeetup.github.io/docs/tasks/administer-cluster/reserve-compute-resources/ https://godoc.org/k8s.io/kubernetes/pkg/kubelet/apis/config#KubeletConfiguration</description>
    </item>
    
    <item>
      <title>Interface</title>
      <link>https://pytimer.github.io/2019/04/interface/</link>
      <pubDate>Tue, 30 Apr 2019 16:33:54 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2019/04/interface/</guid>
      <description>检测struct类型是否实现了某个接口 package main import &amp;quot;fmt&amp;quot; type Resource interface { GetName() string Restart() } type Pod struct { Name string RestartNumber int } func (p Pod) GetName() string { return p.Name } func (p *Pod) Restart() { p.RestartNumber += 1 } func main() { // 会出现如下的错误: cannot use Pod literal (type Pod) as type Resource in assignment: Pod does not implement Resource (Restart method has pointer receiver) var _ Resource = Pod{} }  因此如果我们想要检测一个类型是否实现了指定的接口，可以通过var _ io.</description>
    </item>
    
    <item>
      <title>在GCP上创建虚拟机实例</title>
      <link>https://pytimer.github.io/2019/04/%E5%9C%A8gcp%E4%B8%8A%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E4%BE%8B/</link>
      <pubDate>Sat, 20 Apr 2019 19:33:35 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2019/04/%E5%9C%A8gcp%E4%B8%8A%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E4%BE%8B/</guid>
      <description>想要在GCP上使用kubeadm搭建Kubernetes集群，用来平时使用，因此需要事先在GCP上创建几个虚拟机实例，用来部署集群。
创建虚拟机实例 首先登录GCP的控制台页面，如果没有项目，需要新建一个项目，这里项目示例为kubernetes-pytimer。
新建项目后，选择该项目，进入信息中心，在左侧的导航菜单中，选择Compute Engine -&amp;gt; VM实例，刚进入页面的时候，如果是新注册的用户，需要等待初始化Compute Engine，这个时候页面的创建按钮是不可用的，等待初始化结束，按钮变亮后，即可创建虚拟机实例。
点击创建按钮或者上方工具栏的创建实例按钮。如图：因为是要创建Kubernetes集群使用，而kubeadm在部署集群之前是对机器有要求的，需要至少2核CPU和2GB内存，具体的要求可以参考官方文档说明，因此需要在创建虚拟机实例的时候选择合适规格。
选择虚拟机实例规格的操作比较简单，不进行描述，因为第一台机器需要作为集群的control plane节点，后续也会部署自己的组件，因此磁盘空间选择稍微大些。
这里创建了两台虚拟机实例，等待一会，可以看到两台虚拟机创建完成，并且已经有了内部IP和临时外部IP。如图：本地Mac或者Linux连接虚拟机实例 自己开发电脑如果想要连接远程虚拟机，我们知道都是使用ssh进行连接，默认GCP不允许直接使用root进行远程连接，我们需要使用登录的GCP账号作为虚拟机的用户名进行登录才可以。关于如何登录虚拟机实例，官方有相关的文档，不过稍微有些麻烦，因此在这里进行简单的描述。
我们在本地使用ssh-keygen生成ssh所需要的公钥和密钥，相关的操作，可以查阅[]()。
ssh-keygen -t rsa -f ~/.ssh/k8smaster1 -C &amp;lt;USERNAME&amp;gt;， USERNAME是我们后面使用ssh登录机器的用户名，这样会生成两个文件，可以在~/.ssh看到如下：
$ ll ~/.ssh total 24 -rw------- 1 pytimer staff 1.8K 4 20 15:28 k8smaster1 -rw-r--r-- 1 pytimer staff 395B 4 20 15:28 k8smaster1.pub -rw-r--r-- 1 pytimer staff 2.8K 4 20 13:19 known_hosts  查看k8smaster1.pub文件内容格式为: ssh-rsa &amp;lt;content&amp;gt; &amp;lt;USERNAME&amp;gt;，因为我们后面需要自己使用，因此当前制作密钥不设置过期时间。
接下来我们需要把ssh公钥在虚拟机实例上进行设置。具体的操作可以参考文档添加ssh-key到虚拟机实例。
设置完成后，使用ssh -i ~/.ssh/k8smaster1 &amp;lt;USERNAME&amp;gt;@&amp;lt;IP&amp;gt;即可登录到虚拟机。
&amp;lt;IP&amp;gt;是虚拟机的外部IP。</description>
    </item>
    
    <item>
      <title>[FAQ] Coredns启动失败</title>
      <link>https://pytimer.github.io/2019/03/faq-coredns%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/</link>
      <pubDate>Tue, 26 Mar 2019 22:09:07 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2019/03/faq-coredns%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/</guid>
      <description>coredns pod status is CrashLoopBackOff $ kubectl get pod -n kube-system NAME READY STATUS RESTARTS AGE coredns-fb8b8dccf-cl9rp 0/1 CrashLoopBackOff 6 10m coredns-fb8b8dccf-v4lsv 0/1 CrashLoopBackOff 6 10m etcd-pytimer 1/1 Running 0 9m24s kube-apiserver-pytimer 1/1 Running 0 9m21s kube-controller-manager-pytimer 1/1 Running 0 9m24s kube-flannel-ds-amd64-84vxg 1/1 Running 0 8m14s kube-proxy-cgqpn 1/1 Running 0 10m kube-scheduler-pytimer 1/1 Running 0 9m15s  查看coredns pod的日志，发现如下错误：
$ kubectl logs -n kube-system coredns-fb8b8dccf-cl9rp .:53 2019-03-26T13:58:34.693Z [INFO] CoreDNS-1.3.1 2019-03-26T13:58:34.</description>
    </item>
    
    <item>
      <title>Mac Develop Environment Installation</title>
      <link>https://pytimer.github.io/2019/01/mac-develop-environment-installation/</link>
      <pubDate>Sat, 12 Jan 2019 18:34:29 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2019/01/mac-develop-environment-installation/</guid>
      <description>Mac开发环境配置
安装iTerm2 官网下载：https://www.iterm2.com/
安装oh-my-zsh oh-my-zsh 是一个开源的，负责管理你的zsh配置。
 通过curl来安装  sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&amp;quot;
 通过wget来安装  sh -c &amp;quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&amp;quot;</description>
    </item>
    
    <item>
      <title>Deploy Helm private charts repository on the Kubernetes</title>
      <link>https://pytimer.github.io/2019/01/deploy-helm-private-charts-repository-on-the-kubernetes/</link>
      <pubDate>Tue, 08 Jan 2019 19:21:56 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2019/01/deploy-helm-private-charts-repository-on-the-kubernetes/</guid>
      <description>Helm是一个管理Kubernetes上charts的工具，通过Helm你可以比较方便的部署、卸载组件等操作。
在大多数时候，我们都可以直接使用官方的charts仓库来安装我们想要的组件，但是我们有时候会在内网的情况下使用Helm，这个时候我们可能需要一个自己私有的charts仓库。该文档将介绍如何搭建一个私有的charts仓库。
我们使用minio作为charts仓库的后端存储，结合chartmuseum来提供charts仓库的服务，以方便我们操作charts仓库。
术语  minio: minio是一个类似Amazon S3的分布式存储服务，该服务提供API、SDK、Client来让我们操作。 chartmuseum: chartmuseum是一个Web服务，该服务提供API来让我们比较轻松的操作charts仓库，而且该服务还可以满足多租户场景。  组件 部署完成后，全部的组件。
$ kubectl get pod -n kube-system -l &amp;quot;name=tiller&amp;quot; NAME READY STATUS RESTARTS AGE tiller-deploy-&amp;lt;xxx&amp;gt; 1/1 Running 0 5h $ kubectl get pod -n kube-system -l &amp;quot;app=chartmuseum&amp;quot; NAME READY STATUS RESTARTS AGE &amp;lt;release-name&amp;gt;-chartmuseum-&amp;lt;xxx&amp;gt; 1/1 Running 0 47m $ kubectl get pod -n storage NAME READY STATUS RESTARTS AGE minio-client-deployment-&amp;lt;xxx&amp;gt; 1/1 Running 0 7h minio-deployment-&amp;lt;xxx&amp;gt; 1/1 Running 0 9h  部署 部署私有charts仓库，初始化helm init，部署tiller服务，部署好minio服务，部署chartmuseum，通过helm install安装上述两个组件，启动服务。等待服务启动成功，使用helm添加新的charts仓库即可使用。</description>
    </item>
    
    <item>
      <title>Kube Admission</title>
      <link>https://pytimer.github.io/2018/12/kube-admission/</link>
      <pubDate>Mon, 17 Dec 2018 09:51:57 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/12/kube-admission/</guid>
      <description>External Admission Webhooks 作用及使用场景 当需要对某些api请求或者所有请求进行校验或者修改object的时候，可以考虑使用ValidatingAdmissionWebhook或者MutatingAdmissionWebhook，两者的区别：
 ValidatingAdmissionWebhook不允许在webhook中对Object进行修改，只是返回结果是true或false MutatingAdmissionWebhook运行在webhook中对Object进行修改  启用 在1.10之前的版本，需要使用 --admission-control 启用相关配置，并且是按配置的顺序来决定运行顺序，因此需要用户对于Admission Controllers 完全了解。
在1.10之后的版本，上述配置已经废弃，建议使用--enable-admission-plugins=MutatingAdmissionWebhook,ValidatingAdmissionWebhook，并且用户指定的顺序并不会影响实际运行顺序，更加友好。
官方的Using Admission Controllers - Kubernetes有关于这方面的详细说明。
流程 kube-apiserver &amp;ndash;&amp;gt; 认证鉴权 &amp;ndash;&amp;gt; Admission Controller &amp;ndash;&amp;gt; webhook
使用 创建admission服务，以供kube-apiserver调用 package main import ( &amp;quot;crypto/tls&amp;quot; &amp;quot;encoding/json&amp;quot; &amp;quot;flag&amp;quot; &amp;quot;io/ioutil&amp;quot; &amp;quot;net/http&amp;quot; admissionv1beta1 &amp;quot;k8s.io/api/admission/v1beta1&amp;quot; admissionregistrationv1beta1 &amp;quot;k8s.io/api/admissionregistration/v1beta1&amp;quot; corev1 &amp;quot;k8s.io/api/core/v1&amp;quot; metav1 &amp;quot;k8s.io/apimachinery/pkg/apis/meta/v1&amp;quot; &amp;quot;k8s.io/apimachinery/pkg/runtime&amp;quot; &amp;quot;k8s.io/apimachinery/pkg/runtime/serializer&amp;quot; utilruntime &amp;quot;k8s.io/apimachinery/pkg/util/runtime&amp;quot; &amp;quot;k8s.io/klog&amp;quot; ) type patchOperation struct { Op string `json:&amp;quot;op&amp;quot;` Path string `json:&amp;quot;path&amp;quot;` Value interface{} `json:&amp;quot;value,omitempty&amp;quot;` } var scheme = runtime.</description>
    </item>
    
    <item>
      <title>Kubeadm 设计</title>
      <link>https://pytimer.github.io/2018/12/kubeadm-%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 05 Dec 2018 11:26:10 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/12/kubeadm-%E8%AE%BE%E8%AE%A1/</guid>
      <description>Master：控制面节点
Node：工作节点
目标  构建高可用的Kubernetes集群。
 定义一种通用并且可扩展的多个控制面实例部署的流程。kubeadm join --control-plane。 为明确的用户用例提供一种更好的解决方案。  高级工具集成
  因为要提供给更高级的工具（ansible、saltstack）使用kubeadm来部署集群，因此，kubeadm join --control-plane需要为其提供更好的易操作性：
 并发部署节点
高级工具可以并行的创建节点（包括：控制面节点和工作节点），以减少集群的启动时间。kubeadm join --control-plane应该提供一种更好的实践方式而不是依赖于高级工具进行同步。
 支持动态和静态两种形态的部署流程
 在用户执行kubeadm init的时候，可能并不清楚集群最终的形态是什么样子，例如， 用户可能只启动了一个控制面节点和n个工作节点，然后在未来可能需要添加更多的控制面节点和工作节点。用户不能提前知道控制面节点的最终状态，这种流程叫做“动态部署”。
 kubeadm同时也应该支持另外一种“静态部署”流程，即用户在事先就已经规划并知道控制面节点的数量、IP等信息。
  支持不同的etcd部署场景，具体来说就是，在相同的节点上部署控制面组件和etcd，或者是在专有机器上运行etcd。
  非核心目标  在一个工作节点上安装控制面组件。该节点在最开始就要决定是作为控制面还是工作节点，并且在后续整个生命周期的过程中，都要保持不变。 该设计提案不包括etcd集群部署的管理。 该设计提案不包括api-server的load balancing。但是不能该提案的任何设计都不能阻止用户使用自己的负载均衡方案 该设计提案不涉及kubeadm的self-hosting方案。但是设计不能阻止未来重新考虑该部分。 该提案不提供对于跨主机传输CA和其他必要证书。 该提案不能阻塞当前已经存在的设计。  实现细节 初始化 Kubernetes 集群 在第一个节点上运行kubeadm init初始化集群，该节点被称为自举控制节点。
为支持kubeadm join --control-plane，新的Kubernetes集群必须要满足下面条件：
 集群必须设置一个controlPlaneEndpoint 集群必须使用外部etcd  执行join之前的准备 在调用kubeadm join --control-plane之前，需要用户或者使用高级工具拷贝自举控制节点的证书到新的节点。
证书包括：ca, front-proxy-ca certificate 和 service account key pair</description>
    </item>
    
    <item>
      <title>Install Kubernetes cluster with Kubeadm</title>
      <link>https://pytimer.github.io/2018/12/install-kubernetes-cluster-with-kubeadm/</link>
      <pubDate>Mon, 03 Dec 2018 16:58:17 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/12/install-kubernetes-cluster-with-kubeadm/</guid>
      <description>安装1.13.0-beta.2 安装必要组件 init apiVersion: kubeadm.k8s.io/v1beta1 kind: InitConfiguration bootstrapTokens: - groups: - system:bootstrappers:kubeadm:default-node-token ttl: 24h0m0s usages: - signing - authentication localAPIEndpoint: advertiseAddress: 0.0.0.0 bindPort: 6443 nodeRegistration: criSocket: /var/run/dockershim.sock name: master212 taints: - effect: NoSchedule key: node-role.kubernetes.io/master --- apiServer: timeoutForControlPlane: 4m0s apiVersion: kubeadm.k8s.io/v1beta1 kind: ClusterConfiguration certificatesDir: /etc/kubernetes/pki clusterName: kubernetes controlPlaneEndpoint: &amp;quot;${VIP}&amp;quot; controllerManager: {} dns: type: CoreDNS etcd: local: serverCertSANs: - &amp;quot;${VIP}&amp;quot; extraArgs: cipher-suites: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 dataDir: /var/lib/etcd imageRepository: k8s.gcr.io kubernetesVersion: v1.13.0-beta.2 networking: dnsDomain: cluster.</description>
    </item>
    
    <item>
      <title>Promethues Operator</title>
      <link>https://pytimer.github.io/2018/10/promethues-operator/</link>
      <pubDate>Sun, 28 Oct 2018 15:40:49 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/10/promethues-operator/</guid>
      <description>pormetheus-operator禁用cadvisor-port的方式 目前kubelet已经默认禁用--cadvisor-port的配置，而且后续该配置也会完全移除，因此需要改变prometheus-operator的serviceMonitor，修改的方式如下：
原有的配置方式：
- port: http-metrics interval: 15s - port: cadvisor interval: 30s honorLabels: true  修改后的配置方式：
- port: http-metrics interval: 15s - port: http-metrics path: /metrics/cadvisor interval: 30s honorLabels: true  参考的网址 https://github.com/coreos/prometheus-operator/issues/1400
https://github.com/coreos/prometheus-operator/issues/1741
https://github.com/coreos/prometheus-operator/issues/633</description>
    </item>
    
    <item>
      <title>Telegram Dev</title>
      <link>https://pytimer.github.io/2018/07/telegram-dev/</link>
      <pubDate>Fri, 27 Jul 2018 16:21:45 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/07/telegram-dev/</guid>
      <description>使用 日志设置 在使用tdlib库的时候，需要先设置日志级别
tdlib.SetLogVerbosityLevel(1)  SetLogVerbosityLevel(int)设置tdlib的日志级别，默认为5
   级别 说明     0 fatal   1 error   2 warning、debug warning   3 info   4 debug   5 verbose debug   &amp;gt;5 and &amp;lt;=1024 更多的日志    参考网址 官方tdlib
tdlib methods
td-log</description>
    </item>
    
    <item>
      <title>提问的智慧</title>
      <link>https://pytimer.github.io/2018/06/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/</link>
      <pubDate>Fri, 08 Jun 2018 14:52:20 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/</guid>
      <description>比较好的一篇教人如何在互联网上提出自己问题，让其他人更愿意回答你的提问，而不是排斥。
不只是技术问题，其他的问题也可以参考该提问方式。
 善用搜索引擎(Google、百度)
 请先阅读官方文档
 提问的时候最好提出自己曾尝试过的方法，或者让别人知道你有尽力尝试过解决该问题。
 提问的时候相关背景尽可能详细的说明清楚，并直接提出自己的目标而不仅仅是过程。
 提问的时候尽量不要加&amp;rdquo;紧急&amp;rdquo;之类的标题，哪怕你是付费用户。
 请态度和善提出你的任何问题，并善良对待任何人任何问题，不论谁都不喜欢自以为是的人。
 多用&amp;rdquo;请&amp;rdquo;、&amp;rdquo;谢谢&amp;rdquo;之类的词语，同时对回复者保持尊重和感谢。
  链接地址：提问的智慧</description>
    </item>
    
    <item>
      <title>runc spec源码解读</title>
      <link>https://pytimer.github.io/2018/06/runc-spec%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</link>
      <pubDate>Thu, 07 Jun 2018 13:53:15 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/runc-spec%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</guid>
      <description>runc spec 命令的使用说明
该命令，主要是用来生成容器启动的config.json文件，所有的容器config.json初始相同，根据--rootless再覆盖配置，重新生成config.json
--bundle 工作目录
--rootless 非root用户权限的容器
$ runc spec --help NAME: runc spec - create a new specification file USAGE: runc spec [command options] [arguments...] DESCRIPTION: The spec command creates the new specification file named &amp;quot;config.json&amp;quot; for the bundle. The spec generated is just a starter file. Editing of the spec is required to achieve desired results. For example, the newly generated spec includes an args parameter that is initially set to call the &amp;quot;sh&amp;quot; command when the container is started.</description>
    </item>
    
    <item>
      <title>runc解读(二)</title>
      <link>https://pytimer.github.io/2018/06/runc%E8%A7%A3%E8%AF%BB%E4%BA%8C/</link>
      <pubDate>Wed, 06 Jun 2018 14:34:02 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/runc%E8%A7%A3%E8%AF%BB%E4%BA%8C/</guid>
      <description>runc run命令源码流程解读
有些地方不是很明白，会继续研究，先初步掌握整体流程
简单记录，后续整理
断点设置 b /root/workspace/src/github.com/opencontainers/runc/utils_linux.go:248
b /root/workspace/src/github.com/opencontainers/runc/utils_linux.go:288
调用run 命令，会先检查参数是否正确，然后设置pid file 根据命令行参数初始化容器配置 1.更改工作路径到--bundle参数所指定的路径下
2.读取config.json配置文件 生成specs.Spec
3.校验process的参数是否正确validateProcessSpec
4.返回specs.Spec
启动容器，需要specs.Spec和CT_ACT_RUN这个参数(查看这个参数在linux的含义) func startContainer(context *cli.Context, spec *specs.Spec, action CtAct, criuOpts *libcontainer.CriuOpts) (int, error) { id := context.Args().First() if id == &amp;quot;&amp;quot; { return -1, errEmptyID } notifySocket := newNotifySocket(context, os.Getenv(&amp;quot;NOTIFY_SOCKET&amp;quot;), id) if notifySocket != nil { notifySocket.setupSpec(context, spec) } container, err := createContainer(context, id, spec) if err != nil { return -1, err } if notifySocket !</description>
    </item>
    
    <item>
      <title>runc解读(一)</title>
      <link>https://pytimer.github.io/2018/06/runc%E8%A7%A3%E8%AF%BB%E4%B8%80/</link>
      <pubDate>Wed, 06 Jun 2018 13:46:13 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/runc%E8%A7%A3%E8%AF%BB%E4%B8%80/</guid>
      <description> runc 源码解读
runc项目只是阅读源码有些地方不是很好理解，因此采用Delve一边调试一边查看源码的方式。
执行的命令示例：
dlv debug -- run --bundle /root/mycontainer/basic testcontainer
通过该方式可以进入debugger模式，可以设置断点，单步查看每个函数调用的效果，同时也方便查看当前操作系统的改变
runc spec bundle 切换工作目录，执行的是os.Chdir(bundle)
该命令，主要是用来生成容器启动的config.json文件，所有的容器config.json初始相同，根据--rootless再覆盖配置，重新生成config.json
run runc run &amp;lt;container&amp;gt; 会生成state.json，该文件默认在/run/runc/&amp;lt;container&amp;gt;下，也可以使用--root /tmp/runc这个命令来改变存储位置。
后面会单独描述该命令的代码流程。
state TODO
list 该命令可以查看目前启动的容器，该命令就是根据state.json来显示，因此如果启动容器的时候，指定了--root，在list查询的时候，也需要加上该命令参数。
list.go只是对state.json的数据处理，没有过多关于底层实现。
 getContainers() 调用utils_linux/loadFactory()，根据--root参数生成实现libcontainer.Factory接口的结构体，linux的Factory对应的就是libcontainer/factory_linux.go中的LinuxFactory 遍历--root指定路径下的目录 调用factory.Load(目录名)，根据state.json来生成对应的容器结构体libcontainer/container_linux.go中linuxContainer annotations就是对应的state.Config.Labels的字段 后面只是对于format的显示处理  </description>
    </item>
    
    <item>
      <title>Go调试工具Delve</title>
      <link>https://pytimer.github.io/2018/06/go%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7delve/</link>
      <pubDate>Wed, 06 Jun 2018 10:42:03 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/go%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7delve/</guid>
      <description>安装 delve/Documentation/installation · derekparker/delve · GitHub提供了所有操作系统平台上安装Delve的说明，
用法 可以使用Delve调试Go程序
Delve支持远程调试、命令行调试、集成环境调试  远程调试  如果程序运行在服务器，我们又没有办法查看到程序的源码，我们可以通过远程调试的方式进行
 在服务器上查看到程序的pid  ps -ef|grep &amp;lt;program&amp;gt;
 执行attach命令  dlv attach &amp;lt;PID&amp;gt; --headless --api-version=2 --log --listen=:8081
 在本机执行connect命令  dlv connect &amp;lt;server_ip&amp;gt;:8081
如果本机dlv退出，远程的dlv也会退出
本机dlv没有启动，远程dlv直接关闭，会导致进程退出
本机dlv退出的时候，会询问是否关闭调试进程的pid
 命令行调试  dlv debug
具体可以查看Getting started with Delve该文档，有比较详细的说明
 集成环境调试  [Chinese]delve · nebulasio/wiki Wiki · GitHub
常用命令说明    命令 描述     args 打印函数参数   break (alias: b) 设置一个断点   breakpoints (alias: bp) 打印活动断点信息   clear 删除断点   clearall 删除所有的断点   condition (alias: cond) 设置断点条件   config 改变配置参数   continue (alias: c) 运行到断点或程序终止   exit `(alias: quit q)`   funcs 打印函数列表   goroutine 显示或更改当前goroutine   goroutines 列出程序的全部goroutines   help (alias: h) 打印出帮助信息   list `(alias: ls l)`   locals 打印局部变量   next (alias: n) 跳到下一行   on 在遇到断点时执行一个命令   print (alias: p) 表达式   regs 打印CPU寄存器的内容   restart (alias: r) 重启进程   set 更改变量的值   source 执行包含delve命令列表的文件   sources 打印源文件列表   stack (alias: bt) 打印堆栈跟踪信息   step (alias: s) 单步执行程序   step-instruction (alias: si) 单步单个执行cpu指令   stepout 退出当前函数   thread (alias: tr) 切换到指定的线程   threads 打印每一个跟踪线程的信息   trace (alias: t) 设置跟踪点   types 打印类型列表   vars 打印某个包内的(全局)变量   whatis 打印表达式的类型    完整的命令说明：delve/Documentation/cli · derekparker/delve · GitHub</description>
    </item>
    
    <item>
      <title>flag命令行解析</title>
      <link>https://pytimer.github.io/2018/06/flag%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 06 Jun 2018 09:47:21 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/flag%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%A7%A3%E6%9E%90/</guid>
      <description>flag用于解析命令行参数
 语法 -flag //只支持bool -flag=x //都支持 -flag x //支持非bool
bool类型可以为：1,0,t,f,T,F,true,false,True,False,TRUE,FALSE
flag定义参数  flag.String()等flag.Xxx()方法，flag该方式返回一个指针 flag.XxxVar()方法将flag参数绑定到一个变量 flag.Var()方法绑定自定义类型，自定义类型需要实现Value()接口  flag.Parse() 解析命令行参数到定义的flag
获取非flag参数 flag.Args() flag.Arg(i)
绑定自定义的flag参数 绑定自定义的flag参数需要实现标准库里的Value接口。
// Value is the interface to the dynamic value stored in a flag. // (The default value is represented as a string.) // // If a Value has an IsBoolFlag() bool method returning true, // the command-line parser makes -name equivalent to -name=true // rather than using the next command-line argument.</description>
    </item>
    
    <item>
      <title>godoc介绍</title>
      <link>https://pytimer.github.io/2018/06/godoc%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 06 Jun 2018 09:47:06 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/godoc%E4%BB%8B%E7%BB%8D/</guid>
      <description>godoc为go语言提供文档生成的工具
godoc有两种使用的方法 命令行使用 godoc fmt Println // 输出fmt.Println的用法文档 godoc -src fmt Println //fmt.Println的实现  启动server godoc -http=&amp;quot;:6060&amp;quot;  搜索 godoc -q Reader  编写godoc文档 规则：
 类型、变量、函数、常量编写注释的时候，直接在声明前编写注释，中间不留空行。  // Fprint formats using the default formats for its operands and writes to w. // Spaces are added between operands when neither is a string. // It returns the number of bytes written and any write error encountered. func Fprint(w io.Writer, a .</description>
    </item>
    
    <item>
      <title>Go调用Windows DLL</title>
      <link>https://pytimer.github.io/2018/06/go%E8%B0%83%E7%94%A8windows-dll/</link>
      <pubDate>Wed, 06 Jun 2018 09:45:10 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/go%E8%B0%83%E7%94%A8windows-dll/</guid>
      <description>动态加载DLL 在编译之前不知道将要调用什么函数，在运行过程中根据需要决定调用哪些函数。
调用方法 LoadLibrary 加载动态链接库到内存，用GetProcAddress动态获得DLL函数入口地址
使用完后，调用FreeLibrary从内存中把它卸载
参考地址：
动态载入DLL所需要的三个函数详解（LoadLibrary,GetProcAddress,FreeLibrary） - westsoft - 博客园</description>
    </item>
    
    <item>
      <title>SUID SGID详细说明</title>
      <link>https://pytimer.github.io/2018/06/suid-sgid%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Tue, 05 Jun 2018 19:44:06 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/suid-sgid%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/</guid>
      <description>Unix下关于文件权限的说明 9 8 7 6 5 4 3 2 1 0 - r w x r - x r - x  第9位表示文件类型，类型说明：
   文件类型 说明     p 管道文件   d 目录文件   l 符号连接文件   - 普通文件   s socket文件   c 字符设备文件   b 块设备文件    第8-6位 文件所有者权限 第5-3位 同组用户权限 第2-0位 其他用户权限
r表示可读 w表示可写 x表示可执行</description>
    </item>
    
    <item>
      <title>Cloud Native</title>
      <link>https://pytimer.github.io/2018/06/cloud-native/</link>
      <pubDate>Fri, 01 Jun 2018 14:38:01 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/cloud-native/</guid>
      <description>参考
Kubernetes与云原生2017年年终总结与2018年展望</description>
    </item>
    
    <item>
      <title>Seccomp</title>
      <link>https://pytimer.github.io/2018/06/seccomp/</link>
      <pubDate>Fri, 01 Jun 2018 14:17:19 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/seccomp/</guid>
      <description> 什么是Seccomp？ 全称：secure computing mode， 是linux kernel2.6.23版本以后支持的一种安全机制。
在Linux中，系统调用会直接暴露给用户态程序，因此不安全的代码滥用调用就会对系统安全造成威胁。通过seccomp可以限制程序对于系统调用的使用，减少系统的暴露面。
查看内核是否支持和使用seccomp  利用/proc/&amp;lt;pid&amp;gt;/status中的Seccomp查看，如果有该字段，说明支持Seccomp。  cat /proc/1/status | grep Seccomp
 利用prctl(2)的PR_GET_SECCOMP的参数获取当前进程的seccomp状态。返回值0表示没有使用seccomp;返回值2表示使用了seccomp并处于SECCOMP_MODE_FILTER模式；其他情况进程会被SIGKILL信号杀死  </description>
    </item>
    
    <item>
      <title>golang/go标准库贡献方式</title>
      <link>https://pytimer.github.io/2018/05/golang-go%E6%A0%87%E5%87%86%E5%BA%93%E8%B4%A1%E7%8C%AE%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Thu, 24 May 2018 10:48:15 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/05/golang-go%E6%A0%87%E5%87%86%E5%BA%93%E8%B4%A1%E7%8C%AE%E6%96%B9%E5%BC%8F/</guid>
      <description>阅读contribute内容 https://golang.org/doc/contribute.html
准备工作 安装配置go-contrib-init工具 $ go get -v -u golang.org/x/tools/cmd/go-contrib-init $ cd /code/to/edit $ go-contrib-init  安装git 配置git使用Gerrit  申请Google Account。
 登录googlesource并生成密码
  进入go.googlesourc.com，单击右上角的&amp;rdquo;Generate Password&amp;rdquo;
 执行完第2步后，会看到&amp;rdquo;Configure Git&amp;rdquo;页面，该页面说明如何配置git使用你的认证token，按说明执行后，在~/.gitcookies文件中可以看到你的token
 注册Gerrit
  用你的Google Account登录go-review.googlesource.com/login/
Contributor License  登录Gerrit
 点击右上角头像的settings，再点击&amp;rdquo;Agreements&amp;rdquo;，如果没有任何的agreements，点击&amp;rdquo;New Contributor Agreement&amp;rdquo;，按提示进行操作。
  设置开发环境 安装git-codereview工具 $ go get -u golang.org/x/review/git-codereview  安装完后git-codereview会在$GOPATH/bin下，把$GOPATH/bin添加到PATH。 (Windows的话执行git --exec-path查看git的执行路径，把git-codereview拷贝到该目录下)
执行以下命令查看是否安装完成
$ git codereview help  设置git aliases 把以下内容写入到~/.gitconfig文件
[alias] change = codereview change gofmt = codereview gofmt mail = codereview mail pending = codereview pending submit = codereview submit sync = codereview sync  代码贡献 讨论设计 在提交代码之前，先去github仓库上提交issue，说明自己的意图，经过讨论后再进行代码的提交</description>
    </item>
    
    <item>
      <title>Readme</title>
      <link>https://pytimer.github.io/2018/05/readme/</link>
      <pubDate>Fri, 18 May 2018 16:29:28 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/05/readme/</guid>
      <description>Hello, welcome to Pytimer world!
Language Golang python</description>
    </item>
    
  </channel>
</rss>