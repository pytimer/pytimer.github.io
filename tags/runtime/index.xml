<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Runtime on pytimer</title>
    <link>https://pytimer.github.io/tags/runtime/</link>
    <description>Recent content in Runtime on pytimer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Jun 2018 14:34:02 +0800</lastBuildDate>
    
	<atom:link href="https://pytimer.github.io/tags/runtime/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>runc解读(二)</title>
      <link>https://pytimer.github.io/2018/06/runc%E8%A7%A3%E8%AF%BB%E4%BA%8C/</link>
      <pubDate>Wed, 06 Jun 2018 14:34:02 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/runc%E8%A7%A3%E8%AF%BB%E4%BA%8C/</guid>
      <description>runc run命令源码流程解读
有些地方不是很明白，会继续研究，先初步掌握整体流程
简单记录，后续整理
断点设置 b /root/workspace/src/github.com/opencontainers/runc/utils_linux.go:248
b /root/workspace/src/github.com/opencontainers/runc/utils_linux.go:288
调用run 命令，会先检查参数是否正确，然后设置pid file 根据命令行参数初始化容器配置 1.更改工作路径到--bundle参数所指定的路径下
2.读取config.json配置文件 生成specs.Spec
3.校验process的参数是否正确validateProcessSpec
4.返回specs.Spec
启动容器，需要specs.Spec和CT_ACT_RUN这个参数(查看这个参数在linux的含义) func startContainer(context *cli.Context, spec *specs.Spec, action CtAct, criuOpts *libcontainer.CriuOpts) (int, error) { id := context.Args().First() if id == &amp;quot;&amp;quot; { return -1, errEmptyID } notifySocket := newNotifySocket(context, os.Getenv(&amp;quot;NOTIFY_SOCKET&amp;quot;), id) if notifySocket != nil { notifySocket.setupSpec(context, spec) } container, err := createContainer(context, id, spec) if err != nil { return -1, err } if notifySocket !</description>
    </item>
    
    <item>
      <title>runc解读(一)</title>
      <link>https://pytimer.github.io/2018/06/runc%E8%A7%A3%E8%AF%BB%E4%B8%80/</link>
      <pubDate>Wed, 06 Jun 2018 13:46:13 +0800</pubDate>
      
      <guid>https://pytimer.github.io/2018/06/runc%E8%A7%A3%E8%AF%BB%E4%B8%80/</guid>
      <description> runc 源码解读
runc项目只是阅读源码有些地方不是很好理解，因此采用Delve一边调试一边查看源码的方式。
执行的命令示例：
dlv debug -- run --bundle /root/mycontainer/basic testcontainer
通过该方式可以进入debugger模式，可以设置断点，单步查看每个函数调用的效果，同时也方便查看当前操作系统的改变
runc spec bundle 切换工作目录，执行的是os.Chdir(bundle)
该命令，主要是用来生成容器启动的config.json文件，所有的容器config.json初始相同，根据--rootless再覆盖配置，重新生成config.json
run runc run &amp;lt;container&amp;gt; 会生成state.json，该文件默认在/run/runc/&amp;lt;container&amp;gt;下，也可以使用--root /tmp/runc这个命令来改变存储位置。
后面会单独描述该命令的代码流程。
state TODO
list 该命令可以查看目前启动的容器，该命令就是根据state.json来显示，因此如果启动容器的时候，指定了--root，在list查询的时候，也需要加上该命令参数。
list.go只是对state.json的数据处理，没有过多关于底层实现。
 getContainers() 调用utils_linux/loadFactory()，根据--root参数生成实现libcontainer.Factory接口的结构体，linux的Factory对应的就是libcontainer/factory_linux.go中的LinuxFactory 遍历--root指定路径下的目录 调用factory.Load(目录名)，根据state.json来生成对应的容器结构体libcontainer/container_linux.go中linuxContainer annotations就是对应的state.Config.Labels的字段 后面只是对于format的显示处理  </description>
    </item>
    
  </channel>
</rss>